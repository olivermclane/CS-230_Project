@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": ""
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false // root node is included
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "Sound_effects"
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1198417486 { 
   	label=Sound_effects
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   Sound_effects1198417486[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Sound_effects</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   clip: Clip [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ backGround()</TD></TR>
<TR><TD ALIGN="LEFT" >+ missileFired()</TD></TR>
<TR><TD ALIGN="LEFT" >+ planeHitsound()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_1965186452 { 
   	label=GameJPanel
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   GameJPanel1965186452[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameJPanel</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+   LifeUpList: List&lt;LifePowerup&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   allowDrop: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ammo: List&lt;Missile&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ammoAmount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ammoPlacement: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ammoReload: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   back: Sound_effects [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   back1: ScrollingBackground [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   bigEnemy: BigEnemy [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   enemy: EnemySprite [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   enemyCount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   enemyExplosion: ExplosionSprite [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   enemyPlayers: List&lt;EnemySprite&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   explosionCount: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   explosionTic: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   gameOver: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healthX: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healthpercent: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >+   lifeCounter: JLabel [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   planeExplosion: ExplosionSprite [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   powerRandom: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   powerUpRate: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   puDrop: Random [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   retroGame: Font [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   score: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   smallEnemy: SmallEnemySprite [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   smallEnemyExplosion: ExplosionSprite [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- intiGamePanel()</TD></TR>
<TR><TD ALIGN="LEFT" >+ paintComponent(g: Graphics)</TD></TR>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

'edges    
GameJPanel1965186452 -> Sound_effects1198417486[label="back
[0..1]"];
    
}
@enduml